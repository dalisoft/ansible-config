---
- name: Create the non-root user account
  become: yes
  become_user: root
  user:
    name: "{{ username }}"
    password: "{{ password | password_hash('sha512', hash_salt) }}"
    create_home: yes # Defaults to yes
    home: "/home/{{ username }}" # Defaults to /home/<username>
    update_password: on_create
    shell: /bin/fish
    groups: sudo
    append: yes

- name: Ensure ssh folder exists
  become: yes
  become_user: "{{ username }}"
  file:
    path: "/home/{{ username }}/.ssh"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0700

- name: Copy authorized_keys to created user
  become: yes
  become_user: "{{ username }}"
  copy:
    src: ~/.ssh/authorized_keys
    dest: "/home/{{ username }}/.ssh/authorized_keys"
    backup: yes
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0640

- name: Harden sshd configuration
  become: yes
  become_user: root
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: "^#?PermitRootLogin"
      line: "PermitRootLogin no"
    - regexp: "^#?PasswordAuthentication"
      line: "PasswordAuthentication no"
    - regexp: "^#?AllowAgentForwarding"
      line: "AllowAgentForwarding no"
    - regexp: "^#?AllowTcpForwarding"
      line: "AllowTcpForwarding no"
    - regexp: "^#?MaxAuthTries"
      line: "MaxAuthTries 5"
    - regexp: "^#?MaxSessions"
      line: "MaxSessions 2"
    - regexp: "^#?TCPKeepAlive"
      line: "TCPKeepAlive no"
    - regexp: "^#?UseDNS"
      line: "UseDNS no"
    - regexp: "^#?AllowAgentForwarding"
      line: "AllowAgentForwarding no"

- name: "Allow {{ username }} to SSH access"
  become: yes
  become_user: root
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^AllowUsers "
    insertafter: "^#Subsystem "
    line: "AllowUsers {{ username }}"

- name: Restart sshd
  become: yes
  become_user: root
  systemd:
    state: restarted
    daemon_reload: yes
    name: sshd

- name: Flush existing firewall rules
  become: yes
  become_user: root
  iptables:
    flush: true

- name: Firewall rule - allow all loopback traffic
  become: yes
  become_user: root
  iptables:
    action: append
    chain: INPUT
    in_interface: lo
    jump: ACCEPT

- name: Firewall rule - allow established connections
  become: yes
  become_user: root
  iptables:
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT

- name: Firewall rule - allow port ping traffic
  become: yes
  become_user: root
  iptables:
    chain: INPUT
    jump: ACCEPT
    protocol: icmp

- name: Firewall rule - allow port 22/SSH traffic
  become: yes
  become_user: root
  iptables:
    chain: INPUT
    destination_port: 22
    jump: ACCEPT
    protocol: tcp

- name: Firewall rule - allow port 80/HTTP traffic
  become: yes
  become_user: root
  iptables:
    chain: INPUT
    destination_port: 80
    jump: ACCEPT
    protocol: tcp

- name: Firewall rule - allow port 443/HTTPS traffic
  become: yes
  become_user: root
  iptables:
    chain: INPUT
    destination_port: 443
    jump: ACCEPT
    protocol: tcp

- name: Firewall rule - drop any traffic without rule
  become: yes
  become_user: root
  iptables:
    chain: INPUT
    jump: DROP

- name: Install `netfilter-persistent` && `iptables-persistent` packages
  become: yes
  become_user: root
  package:
    name: "{{item}}"
    state: present
  loop:
    - iptables-persistent
    - netfilter-persistent
  when: ansible_distribution == "Debian"

- name: Creating a file with content
  become: yes
  become_user: root
  copy:
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: 0644
    content: |
      [DEFAULT]
      # Ban hosts for one hour:
      bantime = 3600

      # Override /etc/fail2ban/jail.d/00-firewalld.conf:
      banaction = iptables-multiport

      [sshd]
      enabled = true
      maxretry = 3
